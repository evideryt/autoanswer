import logging
import os
import asyncio
import json # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ JSON –≤ –ª–æ–≥

from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    TypeHandler, # <--- –î–æ–±–∞–≤–ª—è–µ–º TypeHandler
)
from telegram.constants import ChatType
from telegram.error import TelegramError

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8443))
MY_TELEGRAM_ID = os.environ.get("MY_TELEGRAM_ID")

if not BOT_TOKEN: logger.critical("CRITICAL: Missing BOT_TOKEN"); exit()
if not WEBHOOK_URL: logger.critical("CRITICAL: Missing WEBHOOK_URL"); exit()
if not WEBHOOK_URL.startswith("https://"): logger.critical(f"CRITICAL: WEBHOOK_URL must start with 'https://'"); exit()
if not MY_TELEGRAM_ID: logger.critical("CRITICAL: Missing MY_TELEGRAM_ID"); exit()
try: MY_TELEGRAM_ID = int(MY_TELEGRAM_ID)
except ValueError: logger.critical(f"CRITICAL: MY_TELEGRAM_ID is not valid int"); exit()

logger.info(f"BOT_TOKEN loaded: YES")
logger.info(f"WEBHOOK_URL loaded: {WEBHOOK_URL}")
logger.info(f"PORT configured: {PORT}")
logger.info(f"MY_TELEGRAM_ID (forward target) loaded: {MY_TELEGRAM_ID}")

# --- –ù–û–í–´–ô –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –í–°–ï–• –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ---
async def log_all_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ª—é–±–æ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""
    logger.info(f"--- Received Raw Update ---:\n{json.dumps(update.to_dict(), indent=2, ensure_ascii=False)}")
    # –ú—ã –Ω–µ –±—É–¥–µ–º –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∑–¥–µ—Å—å, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å.
    # –û–Ω–æ –ø–æ—Ç–æ–º –ø–æ–π–¥–µ—Ç –¥–∞–ª—å—à–µ –∫ –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å).

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å) ---
# –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –æ–Ω –ù–ï –ë–£–î–ï–¢ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–ª—è Business —Å–æ–æ–±—â–µ–Ω–∏–π,
# –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏–¥—É—Ç –∏ –æ–±—ã—á–Ω—ã–µ.
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö."""
    logger.info(">>> handle_message triggered <<<") # –î–æ–±–∞–≤–∏–º –ª–æ–≥, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, –µ—Å–ª–∏ –æ–Ω –≤–¥—Ä—É–≥ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç

    # –õ–æ–≥–∏—Ä—É–µ–º JSON –∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å, –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
    logger.info(f"Update passed to handle_message: {update.to_json()}")

    message = update.message
    if not message:
        logger.debug("handle_message: Update does not contain a standard message.")
        return

    original_chat = message.chat
    sender = message.from_user

    if original_chat.id == MY_TELEGRAM_ID:
        logger.debug(f"handle_message: Ignoring message from target chat {MY_TELEGRAM_ID}.")
        return
    if sender and sender.id == context.bot.id:
        logger.debug("handle_message: Ignoring message from bot itself.")
        return

    # (–û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ handle_message –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    # ... (–∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è) ...
    sender_info = "Unknown Sender"
    if sender:
        sender_info = f"{sender.first_name}"
        if sender.last_name: sender_info += f" {sender.last_name}"
        if sender.username: sender_info += f" (@{sender.username})"
        sender_info += f" (ID: {sender.id})"

    chat_info = f"Chat ID: {original_chat.id}"
    if original_chat.title:
        chat_info = f"'{original_chat.title}' ({original_chat.id})"
    elif original_chat.type == ChatType.PRIVATE:
         chat_info = f"Private Chat ({original_chat.id})"

    message_text = message.text
    if not message_text:
        message_text = f"[Non-text message type: {message.effective_attachment.mime_type if message.effective_attachment else 'Unknown'}]"
        if message.caption: message_text += f"\nCaption: {message.caption}"

    def escape_markdown_v2(text: str) -> str:
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        escaped_text = ""
        for char in str(text):
            if char in escape_chars: escaped_text += f'\\{char}'
            else: escaped_text += char
        return escaped_text

    safe_sender_info = escape_markdown_v2(sender_info)
    safe_chat_info = escape_markdown_v2(chat_info)
    safe_message_text = escape_markdown_v2(message_text)

    forward_text = (
        f"üì© *New Message*\n\n"
        f"*From:* {safe_sender_info}\n"
        f"*In:* {safe_chat_info}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{safe_message_text}"
    )
    try:
        await context.bot.send_message(
            chat_id=MY_TELEGRAM_ID, text=forward_text, parse_mode='MarkdownV2'
        )
        logger.info(f"handle_message: Forwarded message from chat {original_chat.id} to {MY_TELEGRAM_ID}")
    except TelegramError as e:
        logger.error(f"handle_message: Failed to forward message (MarkdownV2) to {MY_TELEGRAM_ID}: {e}")
        try:
             forward_text_plain = (
                f"üì© New Message\n\n"
                f"From: {sender_info}\n"
                f"In: {chat_info}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"{message_text}"
             )
             await context.bot.send_message(
                chat_id=MY_TELEGRAM_ID, text=forward_text_plain, parse_mode=None
             )
             logger.info(f"handle_message: Forwarded message (plain text retry) to {MY_TELEGRAM_ID}")
        except Exception as e2:
             logger.error(f"handle_message: Failed to forward message (plain text retry) to {MY_TELEGRAM_ID}: {e2}")


# --- –§—É–Ω–∫—Ü–∏—è post_init (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def post_init(application: Application):
    webhook_full_url = f"{WEBHOOK_URL.rstrip('/')}/{BOT_TOKEN}"
    logger.info(f"Attempting to set webhook using:")
    logger.info(f"  - Base URL (from env): {WEBHOOK_URL}")
    logger.info(f"  - Bot Token: {'*' * (len(BOT_TOKEN) - 4)}{BOT_TOKEN[-4:]}")
    logger.info(f"  - Final Webhook URL for set_webhook: {webhook_full_url}")
    if not webhook_full_url.startswith("https://"):
        logger.error(f"FATAL: The final webhook URL '{webhook_full_url}' does not start with https://.")
    try:
        await application.bot.set_webhook(
            url=webhook_full_url,
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        webhook_info = await application.bot.get_webhook_info()
        logger.info(f"Webhook info after setting: {webhook_info}")
        if webhook_info.url == webhook_full_url:
            logger.info("Webhook successfully set!")
        else:
            logger.warning(f"Webhook URL reported by Telegram ({webhook_info.url}) differs from the URL we tried to set ({webhook_full_url}).")
    except Exception as e:
        logger.error(f"Error setting webhook: {e}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –∏–ª–∏ —Ä–∞–π–∑–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã asyncio.run –ø–æ–Ω—è–ª, —á—Ç–æ –∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è?
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –æ—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è.
        # –ù–æ –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ set_webhook –ø–∞–¥–∞–µ—Ç, run_webhook –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None?
        # –≠—Ç–æ –º–æ–∂–µ—Ç –æ–±—ä—è—Å–Ω–∏—Ç—å –æ—à–∏–±–∫—É "a coroutine was expected".
        # –î–æ–±–∞–≤–∏–º —è–≤–Ω—ã–π raise, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ - –ø—Ä–∏—á–∏–Ω–∞.
        # raise e # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Ä–æ–Ω—è–ª–∞ —Å—Ç–∞—Ä—Ç

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    logger.info("Initializing Telegram Business Forwarder Bot...")

    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .build()
    )

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ü–ï–†–í–´–ú ---
    # group=-1 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Ä–∞–Ω—å—à–µ –¥—Ä—É–≥–∏—Ö
    application.add_handler(TypeHandler(Update, log_all_updates), group=-1)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –Ω–æ –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ –æ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
    application.add_handler(MessageHandler(filters.UpdateType.MESSAGE & ~filters.COMMAND, handle_message))

    logger.info("Application built. Starting webhook listener...")
    try:
        # --- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ post_init –Ω–µ –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –Ω–µ –≤—ã–∑–≤–∞–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ---
        # (–•–æ—Ç—è post_init –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∏—á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å)
        # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±—ã—Ç–æ—á–Ω–∞, –Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—Å—Ç–∞–≤–∏–º –º—ã—Å–ª—å:
        # –µ—Å–ª–∏ –±—ã post_init –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –ø–æ–º–µ—à–∞–ª–æ –±—ã run_webhook...
        logger.info("Running application.run_webhook...")
        webhook_runner = application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=webhook_full_url # –ü–µ—Ä–µ–¥–∞–µ–º URL —è–≤–Ω–æ
        )
        # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª run_webhook –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ asyncio.run
        logger.info(f"application.run_webhook returned: {type(webhook_runner)}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ—Ä—É—Ç–∏–Ω—É
        asyncio.run(webhook_runner)

    except ValueError as e:
        # –õ–æ–≤–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ—à–∏–±–∫—É ValueError, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.critical(f"CRITICAL ERROR during asyncio.run: {e}", exc_info=True)
    except Exception as e:
         logger.critical(f"CRITICAL ERROR: Webhook server failed to start or run: {e}", exc_info=True)
    finally:
         logger.info("Webhook server shut down.")