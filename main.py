import logging
import os
import asyncio
import json
from collections import deque
import google.generativeai as genai
import html

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)
from telegram.constants import ChatType, ParseMode
from telegram.error import TelegramError, Forbidden, BadRequest

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("google.generativeai").setLevel(logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8443))
MY_TELEGRAM_ID = os.environ.get("MY_TELEGRAM_ID")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

MAX_HISTORY_PER_CHAT = 30
DEBOUNCE_DELAY = 15
MY_NAME_FOR_HISTORY = "–∫–∏—Ç–∫–∞—Ç"
SYSTEM_PROMPT = f"""–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –≤–º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ '{MY_NAME_FOR_HISTORY}'.
–¢–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (—Ä–æ–ª—å 'user' - —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, —Ä–æ–ª—å 'model' - –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã '{MY_NAME_FOR_HISTORY}').
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ '{MY_NAME_FOR_HISTORY}', —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å—Ç–∏–ª—å –∏ –º–∞–Ω–µ—Ä—É –æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞—è –¥–∏–∞–ª–æ–≥ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ Markdown. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è.
–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Ç–∏–ø–∞ '{MY_NAME_FOR_HISTORY}:'. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–∞–º –æ—Ç–≤–µ—Ç."""

chat_histories = {}
debounce_tasks = {}
pending_replies = {} # –¢–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º {chat_id: (response_text, business_connection_id)}
gemini_model = None

# --- –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ü–ï–†–ï–ú–ï–ù–ù–´–• (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if not BOT_TOKEN: logger.critical("CRITICAL: Missing BOT_TOKEN"); exit()
if not WEBHOOK_URL: logger.critical("CRITICAL: Missing WEBHOOK_URL"); exit()
if not WEBHOOK_URL.startswith("https://"): logger.critical(f"CRITICAL: WEBHOOK_URL must start with 'https://'"); exit()
if not MY_TELEGRAM_ID: logger.critical("CRITICAL: Missing MY_TELEGRAM_ID"); exit()
try: MY_TELEGRAM_ID = int(MY_TELEGRAM_ID)
except ValueError: logger.critical(f"CRITICAL: MY_TELEGRAM_ID is not valid int"); exit()
if not GEMINI_API_KEY: logger.critical("CRITICAL: Missing GEMINI_API_KEY"); exit()

logger.info(f"BOT_TOKEN loaded: YES")
logger.info(f"WEBHOOK_URL loaded: {WEBHOOK_URL}")
logger.info(f"PORT configured: {PORT}")
logger.info(f"MY_TELEGRAM_ID loaded: {MY_TELEGRAM_ID}")
logger.info(f"GEMINI_API_KEY loaded: YES")
logger.info(f"History length: {MAX_HISTORY_PER_CHAT}, Debounce delay: {DEBOUNCE_DELAY}s")

# --- –§—É–Ω–∫—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ Gemini (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def update_chat_history(chat_id: int, role: str, text: str):
    if not text or not text.strip(): logger.warning(f"Attempted to add empty message to history for chat {chat_id}. Skipping."); return
    if chat_id not in chat_histories: chat_histories[chat_id] = deque(maxlen=MAX_HISTORY_PER_CHAT)
    chat_histories[chat_id].append({"role": role, "parts": [{"text": text.strip()}]})
    logger.debug(f"Updated history for chat {chat_id}. Role: {role}. New length: {len(chat_histories[chat_id])}")

def get_formatted_history(chat_id: int) -> list:
    return list(chat_histories.get(chat_id, []))

async def generate_gemini_response(chat_history: list) -> str | None:
    global gemini_model
    if not gemini_model: logger.error("Gemini model not initialized!"); return None
    if not chat_history: logger.warning("Cannot generate response for empty history."); return None
    logger.info(f"Sending request to Gemini with {len(chat_history)} history entries.")
    try:
        response = await gemini_model.generate_content_async(
            chat_history,
            generation_config=genai.types.GenerationConfig(temperature=0.7),
            safety_settings={'HARM_CATEGORY_HARASSMENT': 'block_none', 'HARM_CATEGORY_HATE_SPEECH': 'block_none',
                             'HARM_CATEGORY_SEXUALLY_EXPLICIT': 'block_none', 'HARM_CATEGORY_DANGEROUS_CONTENT': 'block_none'}
        )
        if response and response.parts:
            generated_text = "".join(part.text for part in response.parts).strip()
            if generated_text and "cannot fulfill" not in generated_text.lower() and "unable to process" not in generated_text.lower():
                 logger.info(f"Received response from Gemini: '{generated_text[:50]}...'")
                 return generated_text
            else: logger.warning(f"Gemini returned empty/refusal: {response.text if hasattr(response, 'text') else '[No text]'}")
        elif response and response.prompt_feedback: logger.warning(f"Gemini request blocked: {response.prompt_feedback}")
        else: logger.warning(f"Gemini returned unexpected structure: {response}")
        return None
    except Exception as e:
        logger.error(f"Error calling Gemini API: {type(e).__name__}: {e}", exc_info=True)
        return None

# --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ –ü–û–°–õ–ï –∑–∞–¥–µ—Ä–∂–∫–∏ ---
async def process_chat_after_delay(
    chat_id: int,
    sender_name: str,
    business_connection_id: str | None, # <--- –ü–†–ò–ù–ò–ú–ê–ï–ú ID –°–í–Ø–ó–ò
    context: ContextTypes.DEFAULT_TYPE
):
    logger.info(f"Debounce timer expired for chat {chat_id}. Processing...")
    current_history = get_formatted_history(chat_id)
    gemini_response = await generate_gemini_response(current_history)

    if gemini_response:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò ID –°–í–Ø–ó–ò –¥–ª—è –∫–Ω–æ–ø–∫–∏
        pending_replies[chat_id] = (gemini_response, business_connection_id)
        logger.debug(f"Stored pending reply for chat {chat_id} with connection_id {business_connection_id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¢–ï–ë–ï —Å –∫–Ω–æ–ø–∫–æ–π
        try:
            safe_sender_name = html.escape(sender_name)
            escaped_gemini_response = html.escape(gemini_response)
            reply_text = (
                f"ü§ñ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}</b> (<i>{safe_sender_name}</i>):\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"<code>{escaped_gemini_response}</code>"
            )
            # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º connection_id –≤ callback_data ---
            # –§–æ—Ä–º–∞—Ç: "send_<chat_id>_<connection_id>" (–µ—Å–ª–∏ ID –µ—Å—Ç—å)
            # –ï—Å–ª–∏ ID –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?), –∫–Ω–æ–ø–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å ID
            callback_data = f"send_{chat_id}"
            if business_connection_id:
                callback_data += f"_{business_connection_id}"

            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç", callback_data=callback_data)]])

            await context.bot.send_message(
                chat_id=MY_TELEGRAM_ID, text=reply_text, reply_markup=keyboard, parse_mode=ParseMode.HTML
            )
            logger.info(f"Sent suggested reply with button (cb: {callback_data}) for chat {chat_id} to {MY_TELEGRAM_ID}")
        except TelegramError as e:
            logger.error(f"Failed to send suggested reply (HTML) to {MY_TELEGRAM_ID}: {e}")
            # Fallback –∏ —Ç.–¥. (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
            try:
                reply_text_plain = (f"ü§ñ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id} ({sender_name}):\n"
                                  f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n{gemini_response}\n(–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏)")
                await context.bot.send_message(chat_id=MY_TELEGRAM_ID, text=reply_text_plain)
                logger.info(f"Sent suggested reply (plain fallback) for chat {chat_id} to {MY_TELEGRAM_ID}")
            except Exception as e2: logger.error(f"Failed to send suggested reply (plain fallback) to {MY_TELEGRAM_ID}: {e2}")
    else:
        logger.warning(f"No response generated by Gemini for chat {chat_id} after debounce.")

    if chat_id in debounce_tasks:
        del debounce_tasks[chat_id]
        logger.debug(f"Removed completed debounce task for chat {chat_id}")


# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_business_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ business_connection_id ---
    logger.info(f"--- Received Update ---:\n{json.dumps(update.to_dict(), indent=2, ensure_ascii=False)}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID —Å–≤—è–∑–∏
    business_connection_id = None
    message_to_process = None

    if update.business_message:
        message_to_process = update.business_message
        business_connection_id = update.business_message.business_connection_id # <--- –ü–æ–ª—É—á–∞–µ–º ID
        logger.info(f"--- Received Business Message (ID: {message_to_process.message_id}, ConnID: {business_connection_id}) ---")
    elif update.edited_business_message:
        message_to_process = update.edited_business_message
        # –í edited_business_message –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å connection_id, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!
        business_connection_id = getattr(update.edited_business_message, 'business_connection_id', None)
        logger.info(f"--- Received Edited Business Message (ID: {message_to_process.message_id}, ConnID: {business_connection_id}) ---")
    else:
        # logger.debug("Update is not a business_message or edited_business_message. Ignored.")
        return

    chat = message_to_process.chat
    sender = message_to_process.from_user
    text = message_to_process.text

    if not text: logger.debug(f"Ignoring non-text business message in chat {chat.id}"); return

    chat_id = chat.id
    is_outgoing = sender and sender.id == MY_TELEGRAM_ID

    if is_outgoing:
        logger.info(f"Processing OUTGOING business message in chat {chat_id}")
        update_chat_history(chat_id, "model", text)
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–µ–±–∞—É–Ω—Å–∞, –µ—Å–ª–∏ –º—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤—Ä—É—á–Ω—É—é —Ä–∞–Ω—å—à–µ
        if chat_id in debounce_tasks:
             logger.debug(f"Cancelling debounce task for chat {chat_id} due to outgoing message.")
             try: debounce_tasks[chat_id].cancel()
             except Exception as e: logger.error(f"Error cancelling task for chat {chat_id}: {e}")
             # –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
             del debounce_tasks[chat_id]
        return

    # --- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –í–•–û–î–Ø–©–ï–ï ---
    logger.info(f"Processing INCOMING business message from user {sender.id if sender else 'Unknown'} in chat {chat_id} via ConnID: {business_connection_id}")
    sender_name = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫";
    if sender: sender_name = sender.first_name or f"User_{sender.id}"
    update_chat_history(chat_id, "user", text)

    if chat_id in debounce_tasks:
        logger.debug(f"Cancelling previous debounce task for chat {chat_id}")
        try: debounce_tasks[chat_id].cancel()
        except Exception as e: logger.error(f"Error cancelling task for chat {chat_id}: {e}")

    logger.info(f"Scheduling new response generation for chat {chat_id} in {DEBOUNCE_DELAY}s")
    async def delayed_processing():
        try:
            await asyncio.sleep(DEBOUNCE_DELAY)
            logger.debug(f"Debounce delay finished for chat {chat_id}. Starting processing.")
            # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º business_connection_id ---
            await process_chat_after_delay(chat_id, sender_name, business_connection_id, context)
        except asyncio.CancelledError: logger.info(f"Debounce task for chat {chat_id} was cancelled.")
        except Exception as e: logger.error(f"Error in delayed processing for chat {chat_id}: {e}", exc_info=True)

    task = asyncio.create_task(delayed_processing())
    debounce_tasks[chat_id] = task
    logger.debug(f"Scheduled task {task.get_name()} for chat {chat_id}")


# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query: logger.warning("Received update without callback_query in button_handler"); return

    logger.info("--- button_handler triggered ---")
    logger.debug(f"CallbackQuery Data: {query.data}")
    try:
        await query.answer()
        logger.debug("Callback query answered.")
    except Exception as e:
        logger.error(f"CRITICAL: Failed to answer callback query: {e}. Stopping handler."); return

    data = query.data
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–∞—Ä—Å–∏–º callback_data —Å connection_id ---
    if not data or not data.startswith("send_"):
        logger.warning(f"Received unhandled callback_data: {data}")
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏) ...
        return

    target_chat_id = None
    business_connection_id = None
    response_text = None
    try:
        parts = data.split("_", 2) # –û–∂–∏–¥–∞–µ–º "send", chat_id, connection_id
        if len(parts) < 2: raise ValueError("Callback data too short")

        target_chat_id_str = parts[1]
        target_chat_id = int(target_chat_id_str)
        # –ü–æ–ª—É—á–∞–µ–º connection_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫)
        business_connection_id = parts[2] if len(parts) > 2 else None

        logger.info(f"Button press: Attempting to send reply to chat {target_chat_id} using ConnID: {business_connection_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ pending_replies
        pending_data = pending_replies.pop(target_chat_id, None)
        if not pending_data:
            logger.warning(f"No pending reply found for chat {target_chat_id}.")
            # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏) ...
            return

        response_text, stored_conn_id = pending_data
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ connection_id –∏–∑ –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π (–µ—Å–ª–∏ –æ–±–∞ –µ—Å—Ç—å)
        if business_connection_id and stored_conn_id and business_connection_id != stored_conn_id:
             logger.warning(f"Connection ID mismatch! Button had {business_connection_id}, stored was {stored_conn_id}. Using stored ID for sending.")
             # –ú–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –∫–∞–∫–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π
             business_connection_id = stored_conn_id
        elif not business_connection_id and stored_conn_id:
             # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä–∞—è –±–µ–∑ ID, –Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö –æ–Ω –µ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
             business_connection_id = stored_conn_id
             logger.debug(f"Using stored connection ID {business_connection_id} as button had none.")


        if not response_text: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
             logger.error(f"Extracted response_text is None for chat {target_chat_id}!")
             # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏) ...
             return

        logger.debug(f"Found pending reply for chat {target_chat_id}: '{response_text[:50]}...'")
        logger.info(f"Attempting context.bot.send_message with: chat_id={target_chat_id}, text='{response_text[:50]}...', business_connection_id={business_connection_id}")

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å business_connection_id ---
        message_sent = False
        last_exception = None
        # –£–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å. –ï—Å–ª–∏ —Å ID –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç - —Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
        try:
            sent_message = await context.bot.send_message(
                chat_id=target_chat_id,
                text=response_text,
                business_connection_id=business_connection_id # <--- –ü–ï–†–ï–î–ê–ï–ú ID –°–í–Ø–ó–ò!
            )
            logger.info(f"Successfully sent message {sent_message.message_id} to chat {target_chat_id} via ConnID {business_connection_id}")
            update_chat_history(target_chat_id, "model", response_text)
            logger.debug(f"Added sent message to history for chat {target_chat_id}")
            await query.edit_message_text(
                text=query.message.text_html + "\n\n<b>‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>",
                parse_mode=ParseMode.HTML, reply_markup=None
            )
            logger.debug(f"Edited original suggestion message for chat {target_chat_id}")
            message_sent = True

        except Forbidden as e: last_exception = e; logger.error(f"Forbidden error sending to chat {target_chat_id} via ConnID {business_connection_id}. Error: {e}")
        except BadRequest as e: last_exception = e; logger.error(f"BadRequest error sending to chat {target_chat_id} via ConnID {business_connection_id}: {e}.")
        except Exception as e: last_exception = e; logger.error(f"Unexpected error sending to chat {target_chat_id} via ConnID {business_connection_id}: {e}", exc_info=True)

        # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if not message_sent:
             logger.warning(f"Failed to send message to chat {target_chat_id} via ConnID {business_connection_id}.")
             error_text = "<b>‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.</b>"
             if isinstance(last_exception, Forbidden): error_text = "<b>‚ùå –û—à–∏–±–∫–∞:</b> –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É (Forbidden). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Business Connection / –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞."
             elif isinstance(last_exception, BadRequest): error_text = f"<b>‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (BadRequest):</b> {html.escape(str(last_exception))}"
             try:
                await query.edit_message_text(text=query.message.text_html + f"\n\n{error_text}", parse_mode=ParseMode.HTML, reply_markup=None)
             except Exception as edit_e: logger.error(f"Failed to edit message after send failure: {edit_e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
    except (ValueError, IndexError) as e: logger.error(f"Error parsing callback_data '{data}': {e}"); # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ...
    except Exception as e: logger.error(f"Unexpected error in button_handler: {e}", exc_info=True); # ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ...


# --- –§—É–Ω–∫—Ü–∏—è post_init (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def post_init(application: Application):
    webhook_full_url = f"{WEBHOOK_URL.rstrip('/')}/{BOT_TOKEN}"
    logger.info(f"Attempting to set webhook using: {webhook_full_url}")
    try:
        await application.bot.set_webhook(
            url=webhook_full_url,
            allowed_updates=[
                "message", "edited_message", "channel_post", "edited_channel_post",
                "business_connection", "business_message", "edited_business_message",
                "deleted_business_messages", "my_chat_member", "chat_member",
                "callback_query"
             ],
            drop_pending_updates=True
        )
        webhook_info = await application.bot.get_webhook_info()
        logger.info(f"Webhook info after setting: {webhook_info}")
        if webhook_info.url == webhook_full_url: logger.info("Webhook successfully set!")
        else: logger.warning(f"Webhook URL reported differ: {webhook_info.url}")
    except Exception as e:
        logger.error(f"Error setting webhook: {e}", exc_info=True)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if __name__ == "__main__":
    logger.info("Initializing Telegram Business Bot with Gemini...")
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        gemini_model = genai.GenerativeModel("gemini-1.5-flash", system_instruction=SYSTEM_PROMPT)
        logger.info(f"Gemini model '{gemini_model.model_name}' initialized successfully.")
    except Exception as e:
        logger.critical(f"CRITICAL: Failed to initialize Gemini: {e}", exc_info=True); exit()

    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    application.add_handler(MessageHandler(filters.UpdateType.BUSINESS_MESSAGE, handle_business_update))
    application.add_handler(MessageHandler(filters.UpdateType.EDITED_BUSINESS_MESSAGE, handle_business_update))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("Application built. Starting webhook listener...")
    try:
        webhook_full_url = f"{WEBHOOK_URL.rstrip('/')}/{BOT_TOKEN}"
        asyncio.run(application.run_webhook(
            listen="0.0.0.0", port=PORT, url_path=BOT_TOKEN, webhook_url=webhook_full_url
        ))
    except ValueError as e: logger.critical(f"CRITICAL ERROR asyncio.run: {e}", exc_info=True)
    except Exception as e: logger.critical(f"CRITICAL ERROR Webhook server: {e}", exc_info=True)
    finally: logger.info("Webhook server shut down.")