import logging
import os
import asyncio
# –£–±—Ä–∞–ª–∏ psycopg, random –∏ —Ç.–¥.

from telegram import Update
# –£–±—Ä–∞–ª–∏ ChatMember, User - –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏
from telegram.ext import (
    Application,
    MessageHandler, # –ù—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    filters,
    ContextTypes,
)
from telegram.constants import ChatType # –ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —á–∞—Ç–∞
from telegram.error import TelegramError # –î–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8443))
# !!! –í–ê–ñ–ù–û: –£–∫–∞–∂–∏ –°–í–û–ô Telegram ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è !!!
# –≠—Ç–æ ID —á–∞—Ç–∞, –ö–£–î–ê –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.
# –û–±—ã—á–Ω–æ —ç—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π ID (–¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ") –∏–ª–∏ ID –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º.
MY_TELEGRAM_ID = os.environ.get("MY_TELEGRAM_ID")

# --- –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ü–ï–†–ï–ú–ï–ù–ù–´–• ---
if not BOT_TOKEN: logger.critical("CRITICAL: Missing BOT_TOKEN"); exit()
if not WEBHOOK_URL: logger.critical("CRITICAL: Missing WEBHOOK_URL"); exit()
if not WEBHOOK_URL.startswith("https://"): logger.critical(f"CRITICAL: WEBHOOK_URL must start with 'https://'"); exit()
if not MY_TELEGRAM_ID:
    logger.critical("CRITICAL: Missing MY_TELEGRAM_ID environment variable. Set it to your Telegram User ID.")
    exit()
try:
    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –≤ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –æ—Ç–ª–æ–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    MY_TELEGRAM_ID = int(MY_TELEGRAM_ID)
except ValueError:
    logger.critical(f"CRITICAL: MY_TELEGRAM_ID ('{MY_TELEGRAM_ID}') is not a valid integer.")
    exit()


logger.info(f"BOT_TOKEN loaded: YES")
logger.info(f"WEBHOOK_URL loaded: {WEBHOOK_URL}")
logger.info(f"PORT configured: {PORT}")
logger.info(f"MY_TELEGRAM_ID (forward target) loaded: {MY_TELEGRAM_ID}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π
    logger.info(f"Received update: {update.to_json()}") # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ JSON –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

    message = update.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if not message:
        logger.debug("Update does not contain a message.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –∏–∑ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è
    original_chat = message.chat
    sender = message.from_user # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–ª–∏ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç

    # --- –í–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ù–ï –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ó —á–∞—Ç–∞, –ö–£–î–ê –º—ã –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º ---
    # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, –µ—Å–ª–∏ MY_TELEGRAM_ID - —ç—Ç–æ ID —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º,
    # –∏ —Ç—ã —Å–∞–º –ø–∏—à–µ—à—å –±–æ—Ç—É –≤ —ç—Ç–æ—Ç —á–∞—Ç.
    if original_chat.id == MY_TELEGRAM_ID:
        logger.debug(f"Ignoring message from the forward target chat ({MY_TELEGRAM_ID}).")
        return

    # --- –í—Ç–æ—Ä–∞—è –≤–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ù–ï –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∞–º–∏–º –±–æ—Ç–æ–º ---
    # (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è –æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ Business API —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º)
    if sender and sender.id == context.bot.id:
        logger.debug("Ignoring message from the bot itself.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    sender_info = "Unknown Sender"
    if sender:
        sender_info = f"{sender.first_name}"
        if sender.last_name:
            sender_info += f" {sender.last_name}"
        if sender.username:
            sender_info += f" (@{sender.username})"
        sender_info += f" (ID: {sender.id})"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    chat_info = f"Chat ID: {original_chat.id}"
    if original_chat.title:
        chat_info = f"'{original_chat.title}' ({original_chat.id})"
    elif original_chat.type == ChatType.PRIVATE:
        # –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ title –Ω–µ—Ç, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
        # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ ID
         chat_info = f"Private Chat ({original_chat.id})"


    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤)
    message_text = message.text
    if not message_text:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä –∏ —Ç.–¥.)
        message_text = f"[Non-text message type: {message.effective_attachment.mime_type if message.effective_attachment else 'Unknown'}]"
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥–ø–∏—Å–µ–π –∫ –º–µ–¥–∏–∞:
        if message.caption:
             message_text += f"\nCaption: {message.caption}"

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    forward_text = (
        f"üì© *New Message*\n\n"
        f"*From:* {sender_info}\n"
        f"*In:* {chat_info}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{message_text}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π MY_TELEGRAM_ID
    try:
        await context.bot.send_message(
            chat_id=MY_TELEGRAM_ID,
            text=forward_text,
            parse_mode='MarkdownV2' # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è *From*, *In*
            # –í–∞–∂–Ω–æ: –ï—Å–ª–∏ –≤ sender_info –∏–ª–∏ message_text –º–æ–≥—É—Ç –±—ã—Ç—å Markdown —Å–∏–º–≤–æ–ª—ã,
            # –∏—Ö –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π! –ù–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫.
        )
        logger.info(f"Forwarded message from chat {original_chat.id} to {MY_TELEGRAM_ID}")
    except TelegramError as e:
        logger.error(f"Failed to forward message to {MY_TELEGRAM_ID}: {e}")
        # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown
        if "can't parse entities" in str(e).lower():
            logger.warning("Retrying forward without Markdown...")
            try:
                 # –£–±–∏—Ä–∞–µ–º Markdown —Å–∏–º–≤–æ–ª—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                 forward_text_plain = (
                    f"üì© New Message\n\n"
                    f"From: {sender_info}\n" # –ë–µ–∑ *
                    f"In: {chat_info}\n"     # –ë–µ–∑ *
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    f"{message_text}" # –°–∞–º —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                 )
                 await context.bot.send_message(
                    chat_id=MY_TELEGRAM_ID,
                    text=forward_text_plain,
                    parse_mode=None
                 )
                 logger.info(f"Forwarded message (plain text) from chat {original_chat.id} to {MY_TELEGRAM_ID}")
            except Exception as e2:
                 logger.error(f"Failed to forward message (plain text retry) to {MY_TELEGRAM_ID}: {e2}")


# --- –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def post_init(application: Application):
    webhook_full_url = f"{WEBHOOK_URL.rstrip('/')}/{BOT_TOKEN}"
    logger.info(f"Attempting to set webhook using:")
    logger.info(f"  - Base URL (from env): {WEBHOOK_URL}")
    logger.info(f"  - Bot Token: {'*' * (len(BOT_TOKEN) - 4)}{BOT_TOKEN[-4:]}")
    logger.info(f"  - Final Webhook URL for set_webhook: {webhook_full_url}")
    if not webhook_full_url.startswith("https://"):
        logger.error(f"FATAL: The final webhook URL '{webhook_full_url}' does not start with https://.")
    try:
        await application.bot.set_webhook(
            url=webhook_full_url,
            # –í–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∞—Ç—å
            # –î–ª—è Business API –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è 'business_message', 'edited_business_message' –∏ —Ç.–¥.
            # –ù–æ –Ω–∞—á–Ω–µ–º —Å Update.ALL_TYPES, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –≤—Å–µ –ø–æ–π–º–∞—Ç—å
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        webhook_info = await application.bot.get_webhook_info()
        logger.info(f"Webhook info after setting: {webhook_info}")
        if webhook_info.url == webhook_full_url:
            logger.info("Webhook successfully set!")
        else:
            logger.warning(f"Webhook URL reported by Telegram ({webhook_info.url}) differs from the URL we tried to set ({webhook_full_url}).")
    except Exception as e:
        logger.error(f"Error setting webhook: {e}", exc_info=True)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    logger.info("Initializing Telegram Business Forwarder Bot...")

    # –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–∫–ª–∞–º—É –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º

    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .build()
    )

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –û–î–ù–û–ì–û –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---
    # –õ–æ–≤–∏–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–¥.), –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
    application.add_handler(MessageHandler(filters.MESSAGE & ~filters.COMMAND, handle_message))
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, edited_message

    logger.info("Application built. Starting webhook listener...")
    try:
        webhook_full_url = f"{WEBHOOK_URL.rstrip('/')}/{BOT_TOKEN}"
        asyncio.run(application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=webhook_full_url
        ))
    except Exception as e:
         logger.critical(f"CRITICAL ERROR: Webhook server failed to start or run: {e}", exc_info=True)
    finally:
         logger.info("Webhook server shut down.")