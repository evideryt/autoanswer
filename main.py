import logging
import os
import asyncio
import json
from collections import deque
import google.generativeai as genai

from telegram import Update
from telegram.ext import (
    Application,
    TypeHandler,
    ContextTypes,
)
from telegram.constants import ChatType
from telegram.error import TelegramError, Forbidden, BadRequest # –î–æ–±–∞–≤–∏–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("google.generativeai").setLevel(logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8443))
MY_TELEGRAM_ID = os.environ.get("MY_TELEGRAM_ID")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ—Ç–∞ –∏ Gemini ---
MAX_HISTORY_PER_CHAT = 30 # <--- –ò–ó–ú–ï–ù–ï–ù–û: –î–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏
DEBOUNCE_DELAY = 15 # <--- –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MY_NAME_FOR_HISTORY = "–∫–∏—Ç–∫–∞—Ç"
SYSTEM_PROMPT = f"""–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –≤–º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ '{MY_NAME_FOR_HISTORY}'.
–¢–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (—Ä–æ–ª—å 'user' - —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, —Ä–æ–ª—å 'model' - –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã '{MY_NAME_FOR_HISTORY}').
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ '{MY_NAME_FOR_HISTORY}', —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å—Ç–∏–ª—å –∏ –º–∞–Ω–µ—Ä—É –æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞—è –¥–∏–∞–ª–æ–≥ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ Markdown. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è.
–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Ç–∏–ø–∞ '{MY_NAME_FOR_HISTORY}:'. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–∞–º –æ—Ç–≤–µ—Ç."""

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∑–∞–¥–∞—á –¥–µ–±–∞—É–Ω—Å–∞ ---
chat_histories = {}
debounce_tasks = {} # <--- –î–û–ë–ê–í–õ–ï–ù–û: –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–¥–∞—á {chat_id: asyncio.Task}

gemini_model = None

# --- –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò –ü–ï–†–ï–ú–ï–ù–ù–´–• ---
if not BOT_TOKEN: logger.critical("CRITICAL: Missing BOT_TOKEN"); exit()
if not WEBHOOK_URL: logger.critical("CRITICAL: Missing WEBHOOK_URL"); exit()
if not WEBHOOK_URL.startswith("https://"): logger.critical(f"CRITICAL: WEBHOOK_URL must start with 'https://'"); exit()
if not MY_TELEGRAM_ID: logger.critical("CRITICAL: Missing MY_TELEGRAM_ID"); exit()
try: MY_TELEGRAM_ID = int(MY_TELEGRAM_ID)
except ValueError: logger.critical(f"CRITICAL: MY_TELEGRAM_ID is not valid int"); exit()
if not GEMINI_API_KEY: logger.critical("CRITICAL: Missing GEMINI_API_KEY"); exit()

logger.info(f"BOT_TOKEN loaded: YES")
logger.info(f"WEBHOOK_URL loaded: {WEBHOOK_URL}")
logger.info(f"PORT configured: {PORT}")
logger.info(f"MY_TELEGRAM_ID loaded: {MY_TELEGRAM_ID}")
logger.info(f"GEMINI_API_KEY loaded: YES")
logger.info(f"History length: {MAX_HISTORY_PER_CHAT}, Debounce delay: {DEBOUNCE_DELAY}s") # –õ–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def update_chat_history(chat_id: int, role: str, text: str):
    if chat_id not in chat_histories:
        chat_histories[chat_id] = deque(maxlen=MAX_HISTORY_PER_CHAT)
    chat_histories[chat_id].append({"role": role, "parts": [{"text": text}]})
    logger.debug(f"Updated history for chat {chat_id}. New length: {len(chat_histories[chat_id])}")

def get_formatted_history(chat_id: int) -> list:
    return list(chat_histories.get(chat_id, []))

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Gemini API (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def generate_gemini_response(chat_history: list) -> str | None:
    global gemini_model
    if not gemini_model: logger.error("Gemini model not initialized!"); return None
    if not chat_history: logger.warning("Cannot generate response for empty history."); return None

    logger.info(f"Sending request to Gemini with {len(chat_history)} history entries.")
    try:
        response = await gemini_model.generate_content_async(
            chat_history,
            generation_config=genai.types.GenerationConfig(temperature=0.7), # –ü—Ä–∏–º–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            safety_settings={'HARM_CATEGORY_HARASSMENT': 'block_none',
                             'HARM_CATEGORY_HATE_SPEECH': 'block_none',
                             'HARM_CATEGORY_SEXUALLY_EXPLICIT': 'block_none',
                             'HARM_CATEGORY_DANGEROUS_CONTENT': 'block_none'}
        )
        if response and response.parts:
            generated_text = "".join(part.text for part in response.parts).strip()
            if generated_text and "cannot fulfill this request" not in generated_text.lower():
                 logger.info(f"Received response from Gemini: '{generated_text[:50]}...'")
                 return generated_text
            else: logger.warning(f"Gemini returned empty/refusal: {response.text if hasattr(response, 'text') else '[No text]'}")
        elif response and response.prompt_feedback: logger.warning(f"Gemini request blocked: {response.prompt_feedback}")
        else: logger.warning(f"Gemini returned unexpected structure: {response}")
        return None
    except Exception as e:
        logger.error(f"Error calling Gemini API: {type(e).__name__}: {e}", exc_info=True)
        return None

# --- –ù–û–í–ê–Ø: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ –ü–û–°–õ–ï –∑–∞–¥–µ—Ä–∂–∫–∏ ---
async def process_chat_after_delay(chat_id: int, sender_name: str, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–µ–±–∞—É–Ω—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞."""
    logger.info(f"Debounce timer expired for chat {chat_id}. Processing...")

    # –ü–æ–ª—É—á–∞–µ–º –ê–ö–¢–£–ê–õ–¨–ù–£–Æ –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞
    current_history = get_formatted_history(chat_id)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
    gemini_response = await generate_gemini_response(current_history)

    if gemini_response:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ú –æ—Ç–≤–µ—Ç–æ–º
        # –í–∞–∂–Ω–æ: –¥–µ–ª–∞–µ–º —ç—Ç–æ –∑–¥–µ—Å—å, –ü–û–°–õ–ï –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —á—Ç–æ–±—ã Gemini –≤–∏–¥–µ–ª —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥
        update_chat_history(chat_id, "model", gemini_response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¢–ï–ë–ï –≤ –ª–∏—á–∫—É
        try:
            forward_text = f"ü§ñ *Suggested reply for chat {chat_id}* ({sender_name}):\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n{gemini_response}"
            await context.bot.send_message(
                chat_id=MY_TELEGRAM_ID, text=forward_text, parse_mode='Markdown'
            )
            logger.info(f"Sent suggested reply for chat {chat_id} to {MY_TELEGRAM_ID}")
        except TelegramError as e:
            logger.error(f"Failed to send suggested reply to {MY_TELEGRAM_ID}: {e}")
            try: # –ü—Ä–æ–±—É–µ–º –±–µ–∑ Markdown
                forward_text_plain = f"ü§ñ Suggested reply for chat {chat_id} ({sender_name}):\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n{gemini_response}"
                await context.bot.send_message(chat_id=MY_TELEGRAM_ID, text=forward_text_plain)
                logger.info(f"Sent suggested reply (plain) for chat {chat_id} to {MY_TELEGRAM_ID}")
            except Exception as e2:
                logger.error(f"Failed to send suggested reply (plain retry) to {MY_TELEGRAM_ID}: {e2}")
    else:
        logger.warning(f"No response generated by Gemini for chat {chat_id} after debounce.")
        # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å —Å–µ–±—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞
        # await context.bot.send_message(chat_id=MY_TELEGRAM_ID, text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id} –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏.")

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if chat_id in debounce_tasks:
        del debounce_tasks[chat_id]
        logger.debug(f"Removed completed debounce task for chat {chat_id}")


# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_business_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"--- Received Business Update ---:\n{json.dumps(update.to_dict(), indent=2, ensure_ascii=False)}")

    business_message = update.business_message
    if not business_message:
        logger.debug("Update does not contain a business_message.")
        return

    chat = business_message.chat
    sender = business_message.from_user
    text = business_message.text

    if not text:
        logger.debug(f"Ignoring non-text business message in chat {chat.id}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥—è—â–µ–µ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ –ª–æ–≥–∞–º)
    if sender and sender.id == MY_TELEGRAM_ID:
         logger.info(f"Ignoring outgoing business message from {MY_TELEGRAM_ID} in chat {chat.id}")
         return

    chat_id = chat.id
    sender_name = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫"
    if sender: sender_name = sender.first_name or f"User_{sender.id}"

    # 1. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –°–†–ê–ó–£
    update_chat_history(chat_id, "user", text)

    # 2. –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –¥–µ–±–∞—É–Ω—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if chat_id in debounce_tasks:
        logger.debug(f"Cancelling previous debounce task for chat {chat_id}")
        try:
            debounce_tasks[chat_id].cancel()
        except Exception as e: # –õ–æ–≤–∏–º –æ–±—â–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             logger.error(f"Error cancelling task for chat {chat_id}: {e}")
        # –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        # del debounce_tasks[chat_id] # –£–¥–∞–ª–∏–º –µ–µ –≤ process_chat_after_delay

    # 3. –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ù–û–í–£–Æ –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    logger.info(f"Scheduling new response generation for chat {chat_id} in {DEBOUNCE_DELAY}s")
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∞—á–∞–ª–∞ –∂–¥–µ—Ç, –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
    async def delayed_processing():
        try:
            await asyncio.sleep(DEBOUNCE_DELAY)
            logger.debug(f"Debounce delay finished for chat {chat_id}. Starting processing.")
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await process_chat_after_delay(chat_id, sender_name, context)
        except asyncio.CancelledError:
            logger.info(f"Debounce task for chat {chat_id} was cancelled.")
        except Exception as e:
            logger.error(f"Error in delayed processing for chat {chat_id}: {e}", exc_info=True)
        # finally: # –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ process_chat_after_delay
            # if chat_id in debounce_tasks:
            #     # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
            #     del debounce_tasks[chat_id]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –∫–∞–∫ –∑–∞–¥–∞—á—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
    task = asyncio.create_task(delayed_processing())
    debounce_tasks[chat_id] = task
    logger.debug(f"Scheduled task {task.get_name()} for chat {chat_id}")


# --- –§—É–Ω–∫—Ü–∏—è post_init (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def post_init(application: Application):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑) ...
    webhook_full_url = f"{WEBHOOK_URL.rstrip('/')}/{BOT_TOKEN}"
    logger.info(f"Attempting to set webhook using:")
    logger.info(f"  - Base URL (from env): {WEBHOOK_URL}")
    logger.info(f"  - Bot Token: {'*' * (len(BOT_TOKEN) - 4)}{BOT_TOKEN[-4:]}")
    logger.info(f"  - Final Webhook URL for set_webhook: {webhook_full_url}")
    if not webhook_full_url.startswith("https://"):
        logger.error(f"FATAL: The final webhook URL '{webhook_full_url}' does not start with https://.")
    try:
        await application.bot.set_webhook(
            url=webhook_full_url,
            allowed_updates=[ # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∫ –±—ã–ª–∏
                "message", "edited_message", "channel_post", "edited_channel_post",
                "business_connection", "business_message", "edited_business_message",
                "deleted_business_messages", "my_chat_member", "chat_member",
             ],
            drop_pending_updates=True
        )
        webhook_info = await application.bot.get_webhook_info()
        logger.info(f"Webhook info after setting: {webhook_info}")
        if webhook_info.url == webhook_full_url: logger.info("Webhook successfully set!")
        else: logger.warning(f"Webhook URL reported differ: {webhook_info.url}")
    except Exception as e:
        logger.error(f"Error setting webhook: {e}", exc_info=True)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if __name__ == "__main__":
    logger.info("Initializing Telegram Business Bot with Gemini...")
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        gemini_model = genai.GenerativeModel(
             model_name="gemini-1.5-flash", # –ò–ª–∏ 'gemini-pro'
             system_instruction=SYSTEM_PROMPT
        )
        logger.info(f"Gemini model '{gemini_model.model_name}' initialized successfully.")
    except Exception as e:
        logger.critical(f"CRITICAL: Failed to initialize Gemini: {e}", exc_info=True)
        exit()

    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .build()
    )
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    application.add_handler(TypeHandler(Update, handle_business_update))

    logger.info("Application built. Starting webhook listener...")
    try:
        webhook_full_url = f"{WEBHOOK_URL.rstrip('/')}/{BOT_TOKEN}"
        asyncio.run(application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=webhook_full_url
        ))
    except ValueError as e:
        logger.critical(f"CRITICAL ERROR during asyncio.run: {e}", exc_info=True)
    except Exception as e:
         logger.critical(f"CRITICAL ERROR: Webhook server failed to start or run: {e}", exc_info=True)
    finally:
         logger.info("Webhook server shut down.")