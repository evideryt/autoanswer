import logging
import os
import asyncio
import json

from telegram import Update
from telegram.ext import (
    Application,
    MessageHandler,
    filters,        # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è UpdateType
    ContextTypes,
    TypeHandler,
)
from telegram.constants import ChatType
from telegram.error import TelegramError

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8443))
MY_TELEGRAM_ID = os.environ.get("MY_TELEGRAM_ID")

if not BOT_TOKEN: logger.critical("CRITICAL: Missing BOT_TOKEN"); exit()
if not WEBHOOK_URL: logger.critical("CRITICAL: Missing WEBHOOK_URL"); exit()
if not WEBHOOK_URL.startswith("https://"): logger.critical(f"CRITICAL: WEBHOOK_URL must start with 'https://'"); exit()
if not MY_TELEGRAM_ID: logger.critical("CRITICAL: Missing MY_TELEGRAM_ID"); exit()
try: MY_TELEGRAM_ID = int(MY_TELEGRAM_ID)
except ValueError: logger.critical(f"CRITICAL: MY_TELEGRAM_ID is not valid int"); exit()

logger.info(f"BOT_TOKEN loaded: YES")
logger.info(f"WEBHOOK_URL loaded: {WEBHOOK_URL}")
logger.info(f"PORT configured: {PORT}")
logger.info(f"MY_TELEGRAM_ID (forward target) loaded: {MY_TELEGRAM_ID}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –í–°–ï–• –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) ---
async def log_all_updates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"--- Received Raw Update ---:\n{json.dumps(update.to_dict(), indent=2, ensure_ascii=False)}")

# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_business_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ë–ò–ó–ù–ï–°-—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    logger.info(">>> handle_business_message triggered <<<") # –ü–æ–º–µ–Ω—è–ª–∏ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ª–æ–≥–µ

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ business_message ---
    message = update.business_message

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è —Ñ–∏–ª—å—Ç—Ä –¥–æ–ª–∂–µ–Ω —ç—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å
    if not message:
        logger.debug("handle_business_message: Update does not contain a business_message.")
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 'message', –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–≤–µ–Ω update.business_message ---
    original_chat = message.chat
    # –í –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–∏ 'from' - —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    sender = message.from_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è)
    if original_chat.id == MY_TELEGRAM_ID:
        logger.debug(f"handle_business_message: Ignoring message from target chat {MY_TELEGRAM_ID}.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è business_message, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç)
    if sender and sender.id == context.bot.id:
        logger.debug("handle_business_message: Ignoring message from bot itself.")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    sender_info = "Unknown Sender"
    if sender:
        sender_info = f"{sender.first_name}"
        if sender.last_name: sender_info += f" {sender.last_name}"
        if sender.username: sender_info += f" (@{sender.username})"
        sender_info += f" (ID: {sender.id})"

    chat_info = f"Chat ID: {original_chat.id}"
    if original_chat.title: # –ú–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤, –Ω–æ –≤–¥—Ä—É–≥ –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏–∑–Ω–µ—Å-–≥—Ä—É–ø–ø–µ
        chat_info = f"'{original_chat.title}' ({original_chat.id})"
    elif original_chat.type == ChatType.PRIVATE:
         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ chat, —Ç.–∫. —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
         chat_user_name = original_chat.first_name
         if original_chat.last_name: chat_user_name += f" {original_chat.last_name}"
         if original_chat.username: chat_user_name += f" (@{original_chat.username})"
         chat_info = f"Private Chat with {chat_user_name} ({original_chat.id})"

    message_text = message.text
    if not message_text:
        # –£ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å effective_attachment, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–ª—è
        if message.photo: message_text = "[Photo]"
        elif message.video: message_text = "[Video]"
        elif message.audio: message_text = "[Audio]"
        elif message.voice: message_text = "[Voice Message]"
        elif message.document: message_text = "[Document]"
        elif message.sticker: message_text = f"[Sticker: {message.sticker.emoji}]"
        else: message_text = "[Non-text/Unknown Attachment]"
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if message.caption: message_text += f"\nCaption: {message.caption}"

    # –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def escape_markdown_v2(text: str) -> str:
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        escaped_text = ""
        for char in str(text): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π
            if char in escape_chars: escaped_text += f'\\{char}'
            else: escaped_text += char
        return escaped_text

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ Markdown
    safe_sender_info = escape_markdown_v2(sender_info)
    safe_chat_info = escape_markdown_v2(chat_info)
    safe_message_text = escape_markdown_v2(message_text)

    forward_text = (
        f"üì© *Business Message*\n\n" # –ü–æ–º–µ–Ω—è–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        f"*From:* {safe_sender_info}\n"
        f"*In:* {safe_chat_info}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{safe_message_text}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        await context.bot.send_message(
            chat_id=MY_TELEGRAM_ID, text=forward_text, parse_mode='MarkdownV2'
        )
        logger.info(f"handle_business_message: Forwarded message from chat {original_chat.id} to {MY_TELEGRAM_ID}")
    except TelegramError as e:
        logger.error(f"handle_business_message: Failed to forward message (MarkdownV2) to {MY_TELEGRAM_ID}: {e}")
        try:
             forward_text_plain = (
                f"üì© Business Message\n\n"
                f"From: {sender_info}\n"
                f"In: {chat_info}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"{message_text}"
             )
             await context.bot.send_message(
                chat_id=MY_TELEGRAM_ID, text=forward_text_plain, parse_mode=None
             )
             logger.info(f"handle_business_message: Forwarded message (plain text retry) to {MY_TELEGRAM_ID}")
        except Exception as e2:
             logger.error(f"handle_business_message: Failed to forward message (plain text retry) to {MY_TELEGRAM_ID}: {e2}")


# --- –§—É–Ω–∫—Ü–∏—è post_init (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def post_init(application: Application):
    webhook_full_url = f"{WEBHOOK_URL.rstrip('/')}/{BOT_TOKEN}"
    logger.info(f"Attempting to set webhook using:")
    logger.info(f"  - Base URL (from env): {WEBHOOK_URL}")
    logger.info(f"  - Bot Token: {'*' * (len(BOT_TOKEN) - 4)}{BOT_TOKEN[-4:]}")
    logger.info(f"  - Final Webhook URL for set_webhook: {webhook_full_url}")
    if not webhook_full_url.startswith("https://"):
        logger.error(f"FATAL: The final webhook URL '{webhook_full_url}' does not start with https://.")
    try:
        await application.bot.set_webhook(
            url=webhook_full_url, allowed_updates=Update.ALL_TYPES, drop_pending_updates=True
        )
        webhook_info = await application.bot.get_webhook_info()
        logger.info(f"Webhook info after setting: {webhook_info}")
        if webhook_info.url == webhook_full_url: logger.info("Webhook successfully set!")
        else: logger.warning(f"Webhook URL mismatch: {webhook_info.url} != {webhook_full_url}")
    except Exception as e:
        logger.error(f"Error setting webhook: {e}", exc_info=True)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    logger.info("Initializing Telegram Business Forwarder Bot...")

    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .post_init(post_init)
        .build()
    )

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    # –õ–æ–≥–≥–µ—Ä –í–°–ï–• –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–º)
    application.add_handler(TypeHandler(Update, log_all_updates), group=-1)

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≤–∏–º BUSINESS_MESSAGE, –∞ –Ω–µ MESSAGE ---
    # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä ~filters.COMMAND, —Ç.–∫. –≤ –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–æ–º–∞–Ω–¥ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç
    application.add_handler(MessageHandler(filters.UpdateType.BUSINESS_MESSAGE, handle_business_message))

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –¥–ª—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # application.add_handler(MessageHandler(filters.UpdateType.EDITED_BUSINESS_MESSAGE, handle_edited_business_message))

    logger.info("Application built. Starting webhook listener...")
    try:
        webhook_full_url = f"{WEBHOOK_URL.rstrip('/')}/{BOT_TOKEN}"
        logger.info("Running application.run_webhook...")
        webhook_runner = application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=webhook_full_url
        )
        logger.info(f"application.run_webhook returned: {type(webhook_runner)}")
        asyncio.run(webhook_runner)

    except ValueError as e:
        logger.critical(f"CRITICAL ERROR during asyncio.run: {e}", exc_info=True)
    except Exception as e:
         logger.critical(f"CRITICAL ERROR: Webhook server failed to start or run: {e}", exc_info=True)
    finally:
         logger.info("Webhook server shut down.")